{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Here you will find everything you need to know to get started with log.py, utilize it for your projects and master its features. Note This documentation will always be for the latest version of log.py. Due to time constraints, there won't be dedicated documentation for every version of log.py. However, you can pull the documentation files from the GitHub Repository for each version, but this is not recommended as the latest stable build will always be your best option. Warning log.py is currently in its \"early-release\" stages, meaning problems could occur. About log.py is a basic logging library created for the sole purpose of being able to log according to the wishes of its creator . Quote Logging should be easy and highly customizable with as less hassle as possible. Features Echo logs to the terminal. Save logs to log files. Logs have multiple levels and custom levels can be made. Logging should be doable in an instantiated and non-instantiated manner.","title":"Home"},{"location":"#home","text":"Here you will find everything you need to know to get started with log.py, utilize it for your projects and master its features. Note This documentation will always be for the latest version of log.py. Due to time constraints, there won't be dedicated documentation for every version of log.py. However, you can pull the documentation files from the GitHub Repository for each version, but this is not recommended as the latest stable build will always be your best option. Warning log.py is currently in its \"early-release\" stages, meaning problems could occur.","title":"Home"},{"location":"#about","text":"log.py is a basic logging library created for the sole purpose of being able to log according to the wishes of its creator . Quote Logging should be easy and highly customizable with as less hassle as possible.","title":"About"},{"location":"#features","text":"Echo logs to the terminal. Save logs to log files. Logs have multiple levels and custom levels can be made. Logging should be doable in an instantiated and non-instantiated manner.","title":"Features"},{"location":"examples/","text":"Examples Custom format from logpy import Logger from logpy.log import Format custom_format = Format ( \"$date - $time | ($level) $message\" , \"%Y-%m- %d \" , \"%H;%M;%S\" ) logger = Logger ( custom_format ) logger . log ( \"Custom log format.\" ) Custom level from logpy import Logger from logpy.log import Level from logpy.ansi import ForegroundColor , BackgroundColor , Effect logger = Logger () level = Level ( \"LEVEL NAME\" , ForegroundColor . red , BackgroundColor . white , Effect . reverse ) logger . log ( \"Custom log level.\" , level )","title":"Examples"},{"location":"examples/#examples","text":"Custom format from logpy import Logger from logpy.log import Format custom_format = Format ( \"$date - $time | ($level) $message\" , \"%Y-%m- %d \" , \"%H;%M;%S\" ) logger = Logger ( custom_format ) logger . log ( \"Custom log format.\" ) Custom level from logpy import Logger from logpy.log import Level from logpy.ansi import ForegroundColor , BackgroundColor , Effect logger = Logger () level = Level ( \"LEVEL NAME\" , ForegroundColor . red , BackgroundColor . white , Effect . reverse ) logger . log ( \"Custom log level.\" , level )","title":"Examples"},{"location":"getting_started/","text":"Getting started Installation Danger log.py requires Python 3.10 . pip install log.py Imports Logger from logpy import Logger Format from logpy.log import Format Levels from logpy.log import Levels Level from logpy.log import Level ForegroundColors from logpy.ansi import ForegroundColors BackgroundColors from logpy.ansi import BackgroundColors Effects from logpy.ansi import Effects Basic usage Instantiated from logpy import Logger from logpy.log import Levels logger = Logger () logger . log ( \"Hello World!\" ) logger . log ( \"Oh no, something went wrong.\" , Levels . error ) Non-instantiated from logpy import Logger Logger . slog ( \"Hello World!\" ) Logger . slog ( \"Oh no, something went wrong.\" , Levels . error )","title":"Getting started"},{"location":"getting_started/#getting-started","text":"","title":"Getting started"},{"location":"getting_started/#installation","text":"Danger log.py requires Python 3.10 . pip install log.py","title":"Installation"},{"location":"getting_started/#imports","text":"Logger from logpy import Logger Format from logpy.log import Format Levels from logpy.log import Levels Level from logpy.log import Level ForegroundColors from logpy.ansi import ForegroundColors BackgroundColors from logpy.ansi import BackgroundColors Effects from logpy.ansi import Effects","title":"Imports"},{"location":"getting_started/#basic-usage","text":"Instantiated from logpy import Logger from logpy.log import Levels logger = Logger () logger . log ( \"Hello World!\" ) logger . log ( \"Oh no, something went wrong.\" , Levels . error ) Non-instantiated from logpy import Logger Logger . slog ( \"Hello World!\" ) Logger . slog ( \"Oh no, something went wrong.\" , Levels . error )","title":"Basic usage"},{"location":"contents/logpy/logger/","text":"logger Class: Logger A logger object which can be used in instantiated and/or non-instantiated use-cases. Method: constructor Instantiates the Logger object. Source def __init__ ( self , l_format : Format = Format (), l_echo : bool = True , l_save : bool = False , l_filepath : str = \"./logs\" , l_file_extension : str = \"log\" ): self . format = l_format self . echo = l_echo self . save = l_save self . filepath = l_filepath self . file_extension = l_file_extension Parameters l_format The format of the log message, date and time. - Type: Format - Default: Format () l_echo Whether to echo the log to the terminal. - Type: bool - Default: True l_save Whether to save the logs to a file. - Type: bool - Default: False l_filepath The filepath to save the log files to if the 'l_save' property is set to True. - Type: str - Default: \"./logs\" l_file_extension The log file extension. - Type: str - Default: \".log\" Example from logpy import Logger logger = Logger () Method: log Log an event and depending on your logger object properties save and/or echo the log. Source def log ( self , l_message : str , l_level : Level = Levels . normal , l_date : datetime = datetime . now (), l_time : datetime = datetime . now ()): log = self . format . generate_log ( l_message , l_date , l_time , l_level ) if self . save : file = f \" { self . filepath } / { datetime . now () . strftime ( self . format . date ) } . { self . file_extension } \" if os . path . exists ( file ): with open ( file , \"a\" ) as log_file : log_file . write ( f \" { log } \\n \" ) else : if self . filepath == \"./logs\" and not os . path . exists ( self . filepath ): os . makedirs ( \"./logs\" ) with open ( file , \"w\" ) as log_file : log_file . write ( f \" { log } \\n \" ) if self . echo : print ( log ) Parameters l_message The message of the log. - Type: str l_level The level of the log. - Type: Level - Default: Levels . normal l_date The date of the log. - Type: datetime . datetime - Default: datetime . datetime . now () l_time The time of the log. - Type: datetime . datetime - Default: datetime . datetime . now () Example from logpy import Logger logger = Logger () logger . log ( \"Hello World!\" ) Method: slog Log an event and echo it to the terminal. Warning This method does not allow saving to a file. For that you will need to instantiate the Logger object and use the log method. Source @staticmethod def slog ( l_message : str , l_level : Level = Levels . normal , l_date : datetime = datetime . now (), l_time : datetime = datetime . now (), l_format : Format = Format ()): print ( l_format . generate_log ( l_message , l_date , l_time , l_level )) Parameters l_message The message of the log. - Type: str l_level The level of the log. - Type: Level - Default: Levels . normal l_date The date of the log. - Type: datetime . datetime - Default: datetime . datetime . now () l_time The time of the log. - Type: datetime . datetime - Default: datetime . datetime . now () l_format The format of the log. - Type: Format - Default: Format () Example from logpy import Logger Logger . slog ( \"Hello World!\" )","title":"logger"},{"location":"contents/logpy/logger/#logger","text":"","title":"logger"},{"location":"contents/logpy/logger/#class-logger","text":"A logger object which can be used in instantiated and/or non-instantiated use-cases.","title":"Class: Logger"},{"location":"contents/logpy/logger/#method-constructor","text":"Instantiates the Logger object. Source def __init__ ( self , l_format : Format = Format (), l_echo : bool = True , l_save : bool = False , l_filepath : str = \"./logs\" , l_file_extension : str = \"log\" ): self . format = l_format self . echo = l_echo self . save = l_save self . filepath = l_filepath self . file_extension = l_file_extension Parameters","title":"Method:  constructor"},{"location":"contents/logpy/logger/#l_format","text":"The format of the log message, date and time. - Type: Format - Default: Format ()","title":"l_format"},{"location":"contents/logpy/logger/#l_echo","text":"Whether to echo the log to the terminal. - Type: bool - Default: True","title":"l_echo"},{"location":"contents/logpy/logger/#l_save","text":"Whether to save the logs to a file. - Type: bool - Default: False","title":"l_save"},{"location":"contents/logpy/logger/#l_filepath","text":"The filepath to save the log files to if the 'l_save' property is set to True. - Type: str - Default: \"./logs\"","title":"l_filepath"},{"location":"contents/logpy/logger/#l_file_extension","text":"The log file extension. - Type: str - Default: \".log\" Example from logpy import Logger logger = Logger ()","title":"l_file_extension"},{"location":"contents/logpy/logger/#method-log","text":"Log an event and depending on your logger object properties save and/or echo the log. Source def log ( self , l_message : str , l_level : Level = Levels . normal , l_date : datetime = datetime . now (), l_time : datetime = datetime . now ()): log = self . format . generate_log ( l_message , l_date , l_time , l_level ) if self . save : file = f \" { self . filepath } / { datetime . now () . strftime ( self . format . date ) } . { self . file_extension } \" if os . path . exists ( file ): with open ( file , \"a\" ) as log_file : log_file . write ( f \" { log } \\n \" ) else : if self . filepath == \"./logs\" and not os . path . exists ( self . filepath ): os . makedirs ( \"./logs\" ) with open ( file , \"w\" ) as log_file : log_file . write ( f \" { log } \\n \" ) if self . echo : print ( log ) Parameters","title":"Method:  log"},{"location":"contents/logpy/logger/#l_message","text":"The message of the log. - Type: str","title":"l_message"},{"location":"contents/logpy/logger/#l_level","text":"The level of the log. - Type: Level - Default: Levels . normal","title":"l_level"},{"location":"contents/logpy/logger/#l_date","text":"The date of the log. - Type: datetime . datetime - Default: datetime . datetime . now ()","title":"l_date"},{"location":"contents/logpy/logger/#l_time","text":"The time of the log. - Type: datetime . datetime - Default: datetime . datetime . now () Example from logpy import Logger logger = Logger () logger . log ( \"Hello World!\" )","title":"l_time"},{"location":"contents/logpy/logger/#method-slog","text":"Log an event and echo it to the terminal. Warning This method does not allow saving to a file. For that you will need to instantiate the Logger object and use the log method. Source @staticmethod def slog ( l_message : str , l_level : Level = Levels . normal , l_date : datetime = datetime . now (), l_time : datetime = datetime . now (), l_format : Format = Format ()): print ( l_format . generate_log ( l_message , l_date , l_time , l_level )) Parameters","title":"Method:  slog"},{"location":"contents/logpy/logger/#l_message_1","text":"The message of the log. - Type: str","title":"l_message"},{"location":"contents/logpy/logger/#l_level_1","text":"The level of the log. - Type: Level - Default: Levels . normal","title":"l_level"},{"location":"contents/logpy/logger/#l_date_1","text":"The date of the log. - Type: datetime . datetime - Default: datetime . datetime . now ()","title":"l_date"},{"location":"contents/logpy/logger/#l_time_1","text":"The time of the log. - Type: datetime . datetime - Default: datetime . datetime . now ()","title":"l_time"},{"location":"contents/logpy/logger/#l_format_1","text":"The format of the log. - Type: Format - Default: Format () Example from logpy import Logger Logger . slog ( \"Hello World!\" )","title":"l_format"},{"location":"contents/logpy/ansi/color/","text":"color Class: ForegroundColor A collection of ANSI foreground colors in the Python format. Attribute: black Black ANSI foreground color. Source black = \" \\033 [30m\" Example from logpy.ansi import ForegroundColor ForegroundColor . black Attribute: red Red ANSI foreground color. Source red = \" \\033 [31m\" Example from logpy.ansi import ForegroundColor ForegroundColor . red Attribute: green Green ANSI foreground color. Source green = \" \\033 [32m\" Example from logpy.ansi import ForegroundColor ForegroundColor . green Attribute: orange Orange ANSI foreground color. Source orange = \" \\033 [33m\" Example from logpy.ansi import ForegroundColor ForegroundColor . orange Attribute: blue Blue ANSI foreground color. Source blue = \" \\033 [34m\" Example from logpy.ansi import ForegroundColor ForegroundColor . blue Attribute: purple Purple ANSI foreground color. Source purple = \" \\033 [35m\" Example from logpy.ansi import ForegroundColor ForegroundColor . purple Attribute: cyan Cyan ANSI foreground color. Source cyan = \" \\033 [36m\" Example from logpy.ansi import ForegroundColor ForegroundColor . cyan Attribute: pink Pink ANSI foreground color. Source pink = \" \\033 [95m\" Example from logpy.ansi import ForegroundColor ForegroundColor . pink Attribute: yellow Yellow ANSI foreground color. Source yellow = \" \\033 [93m\" Example from logpy.ansi import ForegroundColor ForegroundColor . yellow Attribute: white White ANSI foreground color. Source white = \" \\033 [37m\" Example from logpy.ansi import ForegroundColor ForegroundColor . white Attribute: grey Grey ANSI foreground color. Source grey = \" \\033 [90m\" Example from logpy.ansi import ForegroundColor ForegroundColor . grey Attribute: light_red Light red ANSI foreground color. Source light_red = \" \\033 [91m\" Example from logpy.ansi import ForegroundColor ForegroundColor . light_red Attribute: light_green Light green ANSI foreground color. Source light_green = \" \\033 [92m\" Example from logpy.ansi import ForegroundColor ForegroundColor . light_green Attribute: light_blue Light blue ANSI foreground color. Source light_blue = \" \\033 [94m\" Example from logpy.ansi import ForegroundColor ForegroundColor . light_blue Attribute: light_cyan Light cyan ANSI foreground color. Source light_cyan = \" \\033 [96m\" Example from logpy.ansi import ForegroundColor ForegroundColor . light_cyan Class: BackgroundColor A collection of ANSI background colors in the Python format. Attribute: black Black ANSI background color. Source black = \" \\033 [40m\" Example from logpy.ansi import BackgroundColor BackgroundColor . black Attribute: red Red ANSI background color. Source red = \" \\033 [41m\" Example from logpy.ansi import BackgroundColor BackgroundColor . red Attribute: green Green ANSI background color. Source green = \" \\033 [42m\" Example from logpy.ansi import BackgroundColor BackgroundColor . green Attribute: orange Orange ANSI background color. Source orange = \" \\033 [43m\" Example from logpy.ansi import BackgroundColor BackgroundColor . orange Attribute: blue Blue ANSI background color. Source blue = \" \\033 [44m\" Example from logpy.ansi import BackgroundColor BackgroundColor . blue Attribute: purple Purple ANSI background color. Source purple = \" \\033 [45m\" Example from logpy.ansi import BackgroundColor BackgroundColor . purple Attribute: cyan Cyan ANSI background color. Source cyan = \" \\033 [46m\" Example from logpy.ansi import BackgroundColor BackgroundColor . cyan Attribute: white White ANSI background color. Source white = \" \\033 [47m\" Example from logpy.ansi import BackgroundColor BackgroundColor . white","title":"color"},{"location":"contents/logpy/ansi/color/#color","text":"","title":"color"},{"location":"contents/logpy/ansi/color/#class-foregroundcolor","text":"A collection of ANSI foreground colors in the Python format.","title":"Class: ForegroundColor"},{"location":"contents/logpy/ansi/color/#attribute-black","text":"Black ANSI foreground color. Source black = \" \\033 [30m\" Example from logpy.ansi import ForegroundColor ForegroundColor . black","title":"Attribute:  black"},{"location":"contents/logpy/ansi/color/#attribute-red","text":"Red ANSI foreground color. Source red = \" \\033 [31m\" Example from logpy.ansi import ForegroundColor ForegroundColor . red","title":"Attribute:  red"},{"location":"contents/logpy/ansi/color/#attribute-green","text":"Green ANSI foreground color. Source green = \" \\033 [32m\" Example from logpy.ansi import ForegroundColor ForegroundColor . green","title":"Attribute:  green"},{"location":"contents/logpy/ansi/color/#attribute-orange","text":"Orange ANSI foreground color. Source orange = \" \\033 [33m\" Example from logpy.ansi import ForegroundColor ForegroundColor . orange","title":"Attribute:  orange"},{"location":"contents/logpy/ansi/color/#attribute-blue","text":"Blue ANSI foreground color. Source blue = \" \\033 [34m\" Example from logpy.ansi import ForegroundColor ForegroundColor . blue","title":"Attribute:  blue"},{"location":"contents/logpy/ansi/color/#attribute-purple","text":"Purple ANSI foreground color. Source purple = \" \\033 [35m\" Example from logpy.ansi import ForegroundColor ForegroundColor . purple","title":"Attribute:  purple"},{"location":"contents/logpy/ansi/color/#attribute-cyan","text":"Cyan ANSI foreground color. Source cyan = \" \\033 [36m\" Example from logpy.ansi import ForegroundColor ForegroundColor . cyan","title":"Attribute:  cyan"},{"location":"contents/logpy/ansi/color/#attribute-pink","text":"Pink ANSI foreground color. Source pink = \" \\033 [95m\" Example from logpy.ansi import ForegroundColor ForegroundColor . pink","title":"Attribute:  pink"},{"location":"contents/logpy/ansi/color/#attribute-yellow","text":"Yellow ANSI foreground color. Source yellow = \" \\033 [93m\" Example from logpy.ansi import ForegroundColor ForegroundColor . yellow","title":"Attribute:  yellow"},{"location":"contents/logpy/ansi/color/#attribute-white","text":"White ANSI foreground color. Source white = \" \\033 [37m\" Example from logpy.ansi import ForegroundColor ForegroundColor . white","title":"Attribute:  white"},{"location":"contents/logpy/ansi/color/#attribute-grey","text":"Grey ANSI foreground color. Source grey = \" \\033 [90m\" Example from logpy.ansi import ForegroundColor ForegroundColor . grey","title":"Attribute:  grey"},{"location":"contents/logpy/ansi/color/#attribute-light_red","text":"Light red ANSI foreground color. Source light_red = \" \\033 [91m\" Example from logpy.ansi import ForegroundColor ForegroundColor . light_red","title":"Attribute:  light_red"},{"location":"contents/logpy/ansi/color/#attribute-light_green","text":"Light green ANSI foreground color. Source light_green = \" \\033 [92m\" Example from logpy.ansi import ForegroundColor ForegroundColor . light_green","title":"Attribute:  light_green"},{"location":"contents/logpy/ansi/color/#attribute-light_blue","text":"Light blue ANSI foreground color. Source light_blue = \" \\033 [94m\" Example from logpy.ansi import ForegroundColor ForegroundColor . light_blue","title":"Attribute:  light_blue"},{"location":"contents/logpy/ansi/color/#attribute-light_cyan","text":"Light cyan ANSI foreground color. Source light_cyan = \" \\033 [96m\" Example from logpy.ansi import ForegroundColor ForegroundColor . light_cyan","title":"Attribute:  light_cyan"},{"location":"contents/logpy/ansi/color/#class-backgroundcolor","text":"A collection of ANSI background colors in the Python format.","title":"Class: BackgroundColor"},{"location":"contents/logpy/ansi/color/#attribute-black_1","text":"Black ANSI background color. Source black = \" \\033 [40m\" Example from logpy.ansi import BackgroundColor BackgroundColor . black","title":"Attribute:  black"},{"location":"contents/logpy/ansi/color/#attribute-red_1","text":"Red ANSI background color. Source red = \" \\033 [41m\" Example from logpy.ansi import BackgroundColor BackgroundColor . red","title":"Attribute:  red"},{"location":"contents/logpy/ansi/color/#attribute-green_1","text":"Green ANSI background color. Source green = \" \\033 [42m\" Example from logpy.ansi import BackgroundColor BackgroundColor . green","title":"Attribute:  green"},{"location":"contents/logpy/ansi/color/#attribute-orange_1","text":"Orange ANSI background color. Source orange = \" \\033 [43m\" Example from logpy.ansi import BackgroundColor BackgroundColor . orange","title":"Attribute:  orange"},{"location":"contents/logpy/ansi/color/#attribute-blue_1","text":"Blue ANSI background color. Source blue = \" \\033 [44m\" Example from logpy.ansi import BackgroundColor BackgroundColor . blue","title":"Attribute:  blue"},{"location":"contents/logpy/ansi/color/#attribute-purple_1","text":"Purple ANSI background color. Source purple = \" \\033 [45m\" Example from logpy.ansi import BackgroundColor BackgroundColor . purple","title":"Attribute:  purple"},{"location":"contents/logpy/ansi/color/#attribute-cyan_1","text":"Cyan ANSI background color. Source cyan = \" \\033 [46m\" Example from logpy.ansi import BackgroundColor BackgroundColor . cyan","title":"Attribute:  cyan"},{"location":"contents/logpy/ansi/color/#attribute-white_1","text":"White ANSI background color. Source white = \" \\033 [47m\" Example from logpy.ansi import BackgroundColor BackgroundColor . white","title":"Attribute:  white"},{"location":"contents/logpy/ansi/effect/","text":"effect Class: Effect A collection of ANSI effects in the Python format. Attribute: reset Reset ANSI effect. Source reset = \" \\033 [0m\" Example from logpy.ansi import Effect Effect . reset Attribute: bold Bold ANSI effect. Source bold = \" \\033 [01m\" Example from logpy.ansi import Effect Effect . bold Attribute: disable Disable ANSI effect. Source disable = \" \\033 [02m\" Example from logpy.ansi import Effect Effect . disable Attribute: underline Underline ANSI effect. Source underline = \" \\033 [04m\" Example from logpy.ansi import Effect Effect . underline Attribute: reverse Reverse ANSI effect. Source reverse = \" \\033 [07m\" Example from logpy.ansi import Effect Effect . reverse Attribute: strikethrough Strikethrough ANSI effect. Source strikethrough = \" \\033 [09m\" Example from logpy.ansi import Effect Effect . strikethrough Attribute: invisible Invisible ANSI effect. Source invisible = \" \\033 [08m\" Example from logpy.ansi import Effect Effect . invisible","title":"effect"},{"location":"contents/logpy/ansi/effect/#effect","text":"","title":"effect"},{"location":"contents/logpy/ansi/effect/#class-effect","text":"A collection of ANSI effects in the Python format.","title":"Class: Effect"},{"location":"contents/logpy/ansi/effect/#attribute-reset","text":"Reset ANSI effect. Source reset = \" \\033 [0m\" Example from logpy.ansi import Effect Effect . reset","title":"Attribute:  reset"},{"location":"contents/logpy/ansi/effect/#attribute-bold","text":"Bold ANSI effect. Source bold = \" \\033 [01m\" Example from logpy.ansi import Effect Effect . bold","title":"Attribute:  bold"},{"location":"contents/logpy/ansi/effect/#attribute-disable","text":"Disable ANSI effect. Source disable = \" \\033 [02m\" Example from logpy.ansi import Effect Effect . disable","title":"Attribute:  disable"},{"location":"contents/logpy/ansi/effect/#attribute-underline","text":"Underline ANSI effect. Source underline = \" \\033 [04m\" Example from logpy.ansi import Effect Effect . underline","title":"Attribute:  underline"},{"location":"contents/logpy/ansi/effect/#attribute-reverse","text":"Reverse ANSI effect. Source reverse = \" \\033 [07m\" Example from logpy.ansi import Effect Effect . reverse","title":"Attribute:  reverse"},{"location":"contents/logpy/ansi/effect/#attribute-strikethrough","text":"Strikethrough ANSI effect. Source strikethrough = \" \\033 [09m\" Example from logpy.ansi import Effect Effect . strikethrough","title":"Attribute:  strikethrough"},{"location":"contents/logpy/ansi/effect/#attribute-invisible","text":"Invisible ANSI effect. Source invisible = \" \\033 [08m\" Example from logpy.ansi import Effect Effect . invisible","title":"Attribute:  invisible"},{"location":"contents/logpy/log/format/","text":"format Class: Format The format of a log. Method: constructor Instantiates the Format object. Source def __init__ ( self , f_string : str = \"<$date | $time> [$level] $message\" , f_date : str = \" %d -%m-%Y\" , f_time : str = \"%H:%M:%S\" ): self . string = f_string self . date = f_date self . time = f_time Parameters f_string The format string. This uses custom variables, which are identifiable by the '$' symbol. These are the current variables: \u2003- $date = the date of the log. \u2003- $time = the time of the log. \u2003- $level = the level of the log. \u2003- $message = the message of the log. - Type: str - Default: \"<$date | $time> [$level] $message\" f_date The format of the date. This uses the datetime variables. - Type: str - Default: \" %d -%m-%Y\" f_time The format of the time. This uses the datetime variables. - Type: str - Default: \"%H:%M:%S\" Example from logpy.log import Format custom_format = Format ( \"$date - $time | ($level) $message\" , \"%Y-%m- %d \" , \"%H;%M;%S\" ) Method: generate_log Generate the log string, which in turn can be used to show in the terminal and/or be saved to a file. Source def generate_log ( self , f_message : str , f_date : datetime = datetime . now (), f_time : datetime = datetime . now (), f_level : Level = Levels . normal ) -> str : result = f \" { f_level . foreground_color }{ f_level . background_color }{ f_level . effect }{ self . string }{ Effect . reset } \" dictionary = { \"$date\" : f_date . strftime ( self . date ), \"$time\" : f_time . strftime ( self . time ), \"$level\" : f_level . name , \"$message\" : f_message } for variable in dictionary : if variable in result : result = result . replace ( variable , dictionary [ variable ]) return result Parameters f_message The message of the log. - Type: str f_date The date of the log. - Type: datetime . datetime - Default: datetime . datetime . now () f_time The time of the log. - Type: datetime . datetime - Default: datetime . datetime . now () f_level The level of the log. - Type: Level - Default: Levels . normal Example from logpy.log import Format custom_format = Format ( \"$date - $time | ($level) $message\" , \"%Y-%m- %d \" , \"%H;%M;%S\" ) custom_format . generate_log ( \"Hello World!\" )","title":"format"},{"location":"contents/logpy/log/format/#format","text":"","title":"format"},{"location":"contents/logpy/log/format/#class-format","text":"The format of a log.","title":"Class: Format"},{"location":"contents/logpy/log/format/#method-constructor","text":"Instantiates the Format object. Source def __init__ ( self , f_string : str = \"<$date | $time> [$level] $message\" , f_date : str = \" %d -%m-%Y\" , f_time : str = \"%H:%M:%S\" ): self . string = f_string self . date = f_date self . time = f_time Parameters","title":"Method:  constructor"},{"location":"contents/logpy/log/format/#f_string","text":"The format string. This uses custom variables, which are identifiable by the '$' symbol. These are the current variables: \u2003- $date = the date of the log. \u2003- $time = the time of the log. \u2003- $level = the level of the log. \u2003- $message = the message of the log. - Type: str - Default: \"<$date | $time> [$level] $message\"","title":"f_string"},{"location":"contents/logpy/log/format/#f_date","text":"The format of the date. This uses the datetime variables. - Type: str - Default: \" %d -%m-%Y\"","title":"f_date"},{"location":"contents/logpy/log/format/#f_time","text":"The format of the time. This uses the datetime variables. - Type: str - Default: \"%H:%M:%S\" Example from logpy.log import Format custom_format = Format ( \"$date - $time | ($level) $message\" , \"%Y-%m- %d \" , \"%H;%M;%S\" )","title":"f_time"},{"location":"contents/logpy/log/format/#method-generate_log","text":"Generate the log string, which in turn can be used to show in the terminal and/or be saved to a file. Source def generate_log ( self , f_message : str , f_date : datetime = datetime . now (), f_time : datetime = datetime . now (), f_level : Level = Levels . normal ) -> str : result = f \" { f_level . foreground_color }{ f_level . background_color }{ f_level . effect }{ self . string }{ Effect . reset } \" dictionary = { \"$date\" : f_date . strftime ( self . date ), \"$time\" : f_time . strftime ( self . time ), \"$level\" : f_level . name , \"$message\" : f_message } for variable in dictionary : if variable in result : result = result . replace ( variable , dictionary [ variable ]) return result Parameters","title":"Method:  generate_log"},{"location":"contents/logpy/log/format/#f_message","text":"The message of the log. - Type: str","title":"f_message"},{"location":"contents/logpy/log/format/#f_date_1","text":"The date of the log. - Type: datetime . datetime - Default: datetime . datetime . now ()","title":"f_date"},{"location":"contents/logpy/log/format/#f_time_1","text":"The time of the log. - Type: datetime . datetime - Default: datetime . datetime . now ()","title":"f_time"},{"location":"contents/logpy/log/format/#f_level","text":"The level of the log. - Type: Level - Default: Levels . normal Example from logpy.log import Format custom_format = Format ( \"$date - $time | ($level) $message\" , \"%Y-%m- %d \" , \"%H;%M;%S\" ) custom_format . generate_log ( \"Hello World!\" )","title":"f_level"},{"location":"contents/logpy/log/level/","text":"level Class: Level The level of the log. Method: constructor Instantiates the Level object. Source def __init__ ( self , l_name : str , l_foreground_color : ForegroundColor | str = ForegroundColor . white , l_background_color : BackgroundColor | str = \"\" , l_effect : Effect | str = \"\" ): self . name = l_name self . foreground_color = l_foreground_color self . background_color = l_background_color self . effect = l_effect Parameters l_name The name of the log level. This is shown in the log string. - Type: str l_foreground_color The foreground color of the log level. This will be the log string foreground color. - Type: ForegroundColor | str - Default: ForegroundColor . white l_background_color The background color of the log level. This will be the log string background color. - Type: BackgroundColor | str - Default: \"\"\" l_effect The effect of the log level. This will be the effect applied to the log string. - Type: Effect | str - Default: \"\"\" Example from logpy.log import Level custom_level = Level ( \"LEVEL NAME\" , ForegroundColor . red , BackgroundColor . white , Effect . reverse ) Class: Levels A collection of default (and the most used) log levels. Attribute: normal Normal log level. Source normal = Level ( \"NORMAL\" , ForegroundColor . white ) Example from logpy.log import Levels Levels . normal Attribute: notification Notification log level. Source notification = Level ( \"NOTIFICATION\" , ForegroundColor . blue ) Example from logpy.log import Levels Levels . notification Attribute: alert Alert log level. Source alert = Level ( \"ALERT\" , ForegroundColor . yellow ) Example from logpy.log import Levels Levels . alert Attribute: warning Warning log level. Source warning = Level ( \"WARNING\" , ForegroundColor . orange ) Example from logpy.log import Levels Levels . warning Attribute: error Error log level. Source error = Level ( \"ERROR\" , ForegroundColor . red ) Example from logpy.log import Levels Levels . error Attribute: success Success log level. Source success = Level ( \"SUCCESS\" , ForegroundColor . green ) Example from logpy.log import Levels Levels . success Attribute: unknown Unknown log level. Source unknown = Level ( \"UNKNOWN\" , ForegroundColor . cyan ) Example from logpy.log import Levels Levels . unknown","title":"level"},{"location":"contents/logpy/log/level/#level","text":"","title":"level"},{"location":"contents/logpy/log/level/#class-level","text":"The level of the log.","title":"Class: Level"},{"location":"contents/logpy/log/level/#method-constructor","text":"Instantiates the Level object. Source def __init__ ( self , l_name : str , l_foreground_color : ForegroundColor | str = ForegroundColor . white , l_background_color : BackgroundColor | str = \"\" , l_effect : Effect | str = \"\" ): self . name = l_name self . foreground_color = l_foreground_color self . background_color = l_background_color self . effect = l_effect Parameters","title":"Method:  constructor"},{"location":"contents/logpy/log/level/#l_name","text":"The name of the log level. This is shown in the log string. - Type: str","title":"l_name"},{"location":"contents/logpy/log/level/#l_foreground_color","text":"The foreground color of the log level. This will be the log string foreground color. - Type: ForegroundColor | str - Default: ForegroundColor . white","title":"l_foreground_color"},{"location":"contents/logpy/log/level/#l_background_color","text":"The background color of the log level. This will be the log string background color. - Type: BackgroundColor | str - Default: \"\"\"","title":"l_background_color"},{"location":"contents/logpy/log/level/#l_effect","text":"The effect of the log level. This will be the effect applied to the log string. - Type: Effect | str - Default: \"\"\" Example from logpy.log import Level custom_level = Level ( \"LEVEL NAME\" , ForegroundColor . red , BackgroundColor . white , Effect . reverse )","title":"l_effect"},{"location":"contents/logpy/log/level/#class-levels","text":"A collection of default (and the most used) log levels.","title":"Class: Levels"},{"location":"contents/logpy/log/level/#attribute-normal","text":"Normal log level. Source normal = Level ( \"NORMAL\" , ForegroundColor . white ) Example from logpy.log import Levels Levels . normal","title":"Attribute:  normal"},{"location":"contents/logpy/log/level/#attribute-notification","text":"Notification log level. Source notification = Level ( \"NOTIFICATION\" , ForegroundColor . blue ) Example from logpy.log import Levels Levels . notification","title":"Attribute:  notification"},{"location":"contents/logpy/log/level/#attribute-alert","text":"Alert log level. Source alert = Level ( \"ALERT\" , ForegroundColor . yellow ) Example from logpy.log import Levels Levels . alert","title":"Attribute:  alert"},{"location":"contents/logpy/log/level/#attribute-warning","text":"Warning log level. Source warning = Level ( \"WARNING\" , ForegroundColor . orange ) Example from logpy.log import Levels Levels . warning","title":"Attribute:  warning"},{"location":"contents/logpy/log/level/#attribute-error","text":"Error log level. Source error = Level ( \"ERROR\" , ForegroundColor . red ) Example from logpy.log import Levels Levels . error","title":"Attribute:  error"},{"location":"contents/logpy/log/level/#attribute-success","text":"Success log level. Source success = Level ( \"SUCCESS\" , ForegroundColor . green ) Example from logpy.log import Levels Levels . success","title":"Attribute:  success"},{"location":"contents/logpy/log/level/#attribute-unknown","text":"Unknown log level. Source unknown = Level ( \"UNKNOWN\" , ForegroundColor . cyan ) Example from logpy.log import Levels Levels . unknown","title":"Attribute:  unknown"}]}